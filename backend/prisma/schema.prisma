datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String              @id @unique() @default(uuid())
  providerId    String              @unique
  email         String              @unique
  nickName      String?             @unique
  firstName     String?
  lastName      String?
  provider      String?
  avatar        String?
  secretOpt     String?
  otpIsEnabled  Boolean             @default(false)
  level         Int                 @default(10)
  cover         String?
  sockets       String[]
  messages      Message[]
  chats         Chat[]              @relation("ChatMembers")
  channels      Channel[]
  memberships   ChannelMembership[]
  notifications Notification[]
  blockedUsers  User[]              @relation("UserBlocks")
  blockedBy     User[]              @relation("UserBlocks")
}

model Chat {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  messages     Message[]
  members      User[]    @relation("ChatMembers")
  chatPairHash String?   @unique
}

model Channel {
  id        String              @id @default(uuid())
  name      String
  type      AccessType
  password  String?
  createdAt DateTime            @default(now())
  ownerId   String
  owner     User                @relation(fields: [ownerId], references: [id])
  messages  Message[]
  members   ChannelMembership[]
}

enum AccessType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model ChannelMembership {
  channelId String
  userId    String
  isAdmin   Boolean  @default(false)
  isMuted   Boolean? @default(false)
  isBanned  Boolean? @default(false)
  joinedAt  DateTime @default(now())
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model Message {
  id            String         @id @default(uuid())
  content       String
  createdAt     DateTime       @default(now())
  authorId      String
  chatId        String?
  channelId     String?
  author        User           @relation(fields: [authorId], references: [id])
  chat          Chat?          @relation(fields: [chatId], references: [id])
  channel       Channel?       @relation(fields: [channelId], references: [id])
  notifications Notification[]
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  status    Status   @default(PENDING) // e.g., pending, sent, delivered, read
  createdAt DateTime @default(now())
  userId    String
  messageId String?
  user      User     @relation(fields: [userId], references: [id])
  message   Message? @relation(fields: [messageId], references: [id])
}

enum Status {
  PENDING
  SENT
  DELIVERED
}
