datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @unique() @default(uuid())
  providerId   String  @unique
  email        String  @unique
  nickName     String? @unique
  firstName    String?
  lastName     String?
  provider     String?
  avatar       String?
  secretOpt    String?
  otpIsEnabled Boolean @default(false)
  level        Int     @default(0)
  cover        String?

  messages             Message[]
  channels             Channel[]
  memberships          ChannelMembership[]
  chats                Chat[]              @relation("ChatMembers")
  blockedUsers         User[]              @relation("UserBlocks")
  blockedBy            User[]              @relation("UserBlocks")
  NotificationReceived Notification[]      @relation("ReceiverUser")
  NotificationSent     Notification[]      @relation("SenderUser")

  achievements Achievement[]
  friends      User[]        @relation("friends")
  friendOf     User[]        @relation("friends")
  games        Game[]
}

model Game {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  opponentId    String
  userScore     Int
  opponentScore Int
  status        String
  userId        String
  gameName      String?
  gameType      String?
  user          User     @relation(fields: [userId], references: [providerId])
}

model Achievement {
  id     Int     @id @default(autoincrement())
  name   String
  locked Boolean @default(false)
  userId String
  user   User    @relation(fields: [userId], references: [providerId])
}

model Chat {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  chatPairHash String?        @unique
  messages     Message[]
  members      User[]         @relation("ChatMembers")
  Notification Notification[]
}

model Channel {
  id        String              @id @default(uuid())
  name      String
  type      AccessType
  password  String?
  createdAt DateTime            @default(now())
  ownerId   String
  avatar    String?
  owner     User                @relation(fields: [ownerId], references: [id])
  messages  Message[]
  members   ChannelMembership[]
}

enum AccessType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model ChannelMembership {
  channelId String
  userId    String
  isAdmin   Boolean   @default(false)
  isMuted   Boolean?  @default(false)
  expiresAt DateTime?
  isBanned  Boolean?  @default(false)
  joinedAt  DateTime  @default(now())
  channel   Channel   @relation(fields: [channelId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  chatId    String?
  channelId String?
  author    User     @relation(fields: [authorId], references: [id])
  chat      Chat?    @relation(fields: [chatId], references: [id])
  channel   Channel? @relation(fields: [channelId], references: [id])
}

model Notification {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  type       NotifyType
  status     Status     @default(PENDING)
  userId     String
  receiverId String?
  gameId     String?
  chatId     String?
  user       User       @relation("SenderUser", fields: [userId], references: [id])
  receiver   User?      @relation("ReceiverUser", fields: [receiverId], references: [id])
  chat       Chat?      @relation(fields: [chatId], references: [id])
}

enum NotifyType {
  FRIEND_REQUEST
  GAME_INVITE
  MESSAGE
}

enum Status {
  PENDING
  READ
}
